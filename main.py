import logging
import telebot

import asyncio
import re
import yookassa
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentTypes
import markups as nav
from db import Database
from config import Config
from const import Const
# import error_handler

import requests

import xlsxwriter
import uuid
from yookassa import Configuration, Payment, Webhook, Settings
import var_dump as var_dump
from multiprocessing import Process

import json
from django.http import HttpResponse
from yookassa.domain.notification import WebhookNotification
# import tracemalloc

# tracemalloc.start()


config = Config
const = Const

# data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
data = requests.get('https://www.tinkoff.ru/api/v1/currency_rates/').json()
rate = (data['payload']['rates'][72]['sell'])
print(rate)

TOKEN = config.token
    
logging.basicConfig(level = logging.INFO)

bot = Bot(token = TOKEN)

dp = Dispatcher(bot)

db = Database('database.db')

adminId = config.adminId

Configuration.account_id = config.Configuration_account_id
Configuration.secret_key = config.Configuration_secret_key

Configuration.configure_auth_token(config.access_token)

settings = Settings.get_account_settings()
print(settings)

# params = {'limit': 2}
# res1 = Payment.list(params)
# print('res1', res1)
# var_dump.var_dump(Payment.list(params))


# response = Webhook.add({
#     "event": "payment.succeeded",
#     "url": "https://lobanova.net/payment/yookassa",
# })

# response = Webhook.add({
#     "event": "payment.waiting_for_capture",
#     "url": "https://lobanova.net/payment/yookassa",
# })

# response = Webhook.add({
#     "event": "payment.canceled",
#     "url": "https://lobanova.net/payment/yookassa",
# })

# list = Webhook.list()
# print("webhook list", list)
# var_dump.var_dump(Webhook.list())


from http.server import BaseHTTPRequestHandler, HTTPServer
import json
from django.http import HttpResponse
import ssl
import socket
import certifi
import os

class handler(BaseHTTPRequestHandler):
    print("class handler")
    def do_GET(self):
        try:
            print("do_GET")
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'Lobanova senior-pomidor!!!11')
        except Exception as e:
            print("error do_GET", repr(e))

    def do_POST(self):
        print("do_POST")
        self.send_response(200)
        self.send_header('Content-type','application/json')
        self.end_headers()
        length = int(self.headers.get('content-length'))
        message = json.loads(self.rfile.read(length))
        print(message)
        status = (message['event'])
        order_id_raw = (message['object']['description'])
        f = filter(str.isdecimal, order_id_raw)
        order_id = "".join(f)
        if status == "payment.succeeded":
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∑–∞ –∑–∞–∫–∞–∑ 
            if db.get_orderStatus(order_id) == "wait payment":
                db.set_orderStatus(order_id, "complitedPayment")
                db.set_update(order_id) 
                user_id = db.get_user_id_through_order_id(order_id)
                order_inform = "–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞!\n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_paid_order_through_order_id(order_id) 
                print(order_inform)
                # remove inline buttons
                asyncio.run(bot.edit_message_text(chat_id=adminId, message_id=db.get_message_id(order_id), 
                    text = "–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ #" + order_id))
                asyncio.run(bot.send_message(user_id, "–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!"))
                asyncio.run(bot.send_message(adminId, order_inform, reply_markup=nav.orderRedeemedMurkup(order_id)))
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∑–∞ –î–æ—Å—Ç–∞–≤–∫—É 
            elif db.get_orderStatus(order_id) == "wait delivery payment":
                db.set_orderStatus(order_id, "paidOrderDelivery")
                db.set_update(order_id) 
                user_id = db.get_user_id_through_order_id(order_id)
                order_inform = "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞!\n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_delivery_paid_order_through_order_id(order_id)  
                    # remove inline buttons
                asyncio.run(bot.edit_message_text(chat_id=adminId, message_id=db.get_message_id(order_id), 
                    text = "–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –î–û–°–¢–ê–í–ö–£ –∑–∞–∫–∞–∑–∞ #" + order_id))
                asyncio.run(bot.send_message(user_id, "–ü–ª–∞—Ç–µ–∂ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∏–Ω—è—Ç!"))
                asyncio.run(bot.send_message(adminId, order_inform, reply_markup=nav.sentOrderMurkup(order_id)))


httpd = HTTPServer(('', 443), handler)
httpd.socket = ssl.wrap_socket(
    httpd.socket, 
    certfile='/etc/letsencrypt/live/lobanova.net/fullchain.pem', 
    keyfile = '/etc/letsencrypt/live/lobanova.net/privkey.pem',  
    ssl_version=ssl.PROTOCOL_TLS,
    server_side=True)

def payment(value, description):
    payment = Payment.create({
    "amount": {
        "value": value,
        "currency": "RUB"
    },
    "payment_method_data": {
        "type": "bank_card"
    },
    "confirmation": {
        "type": "redirect",
        "return_url": "www.lobanova.net"
    },
    "capture": True,
    "description": description
    }, uuid.uuid4())

    return json.loads(payment.json())

def dataOutput(records, text):
    answer = f"–í—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ - {text}\n"
    for r in records:
        answer += f" üì¶–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {r[0]}\n"
        answer += f" üë§–ö–ª–∏–µ–Ω—Ç - {db.get_nickname(r[1])}\n"
        answer += f" –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - {r[2]}\n"
        answer += f" –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {r[3]}\n"
        answer += f" –°—Ç–∞—Ç—É—Å - {r[5]}\n"
        answer += f" –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {r[10]}\n"
    return(answer)

def orderIdFromMessege(text):
    s = text
    result = re.findall("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - \d+", s)
    mystr = ' '.join(map(str,result))
    number_result = [int(number_result) for number_result in str.split(mystr) if number_result.isdigit()]
    return(number_result)  

def report(text):
    interval = text
    records = db.get_all_orders_in_time(interval)
    if(records):
        answer = dataOutput(records, interval)
        markup = nav.changeMarkup()
    else:
        answer = "–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!"
        markup = None
    return[answer, markup]

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    #sti = open('static/welcome.tgs', 'rb')
    #await bot.send_sticker(message.chat.id, sti)
    if (message.from_user.id == adminId):
        await bot.send_message(message.from_user.id, "Admin", reply_markup = nav.mainMenuAdmin)

    else:

        if (not db.user_exists(message.from_user.id)):
            print("not user_exists")
            db.add_user(message.from_user.id)
            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ä–∞–¥–∞ B–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å! –Ø - –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã. –î–ª—è —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏ —É–∫–∞–∂–∏—Ç–µ –§–ò–û")
        else:
            print("user_exists")
            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + db.get_nickname(message.from_id) + " —Ä–∞–¥–∞ B–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å! –Ø - –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã. –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=nav.mainMenu)


@dp.message_handler(content_types=['text'])
async def bot_message(message: types.Message):
    if message.from_id != adminId:
        userId = message.from_id
        if message.chat.type == 'private':
            if message.text == '–ü—Ä–æ—Ñ–∏–ª—å/–ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                user_nickname = "–í–∞—à–µ –§–ò–û: " + db.get_nickname(userId) + "\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + db.get_contact(userId)
                records = db.get_orders(userId)
                if(records):
                    answer = f"üïò –ò—Å—Ç–æ—Ä–∏—è –ó–∞–∫–∞–∑–æ–≤\n"
                    for r in records:
                        answer += f" {r[2]}\n"
                        answer += f" {r[3]}\n"
                        answer += f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {r[5]}\n"
                    await bot.send_message(userId, answer)
                else:
                    await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
                await bot.send_message(userId, user_nickname)

            elif message.text == '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑':
                await bot.send_message(userId, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑: –±—Ä–µ–Ω–¥, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                db.set_signup(userId, "set_order")
            else:
                if db.get_signup(userId) == "setnickname":
                    if (len(message.text)>60):
                        await bot.send_message(userId, "not more then 60 carrecters")
                    elif '@' in message.text or '/' in message.text or ';' in message.text or '*' in message.text:
                        await bot.send_message(userId, "incorrect symbol")
                    else:
                        db.set_nickname(userId, message.text)
                        db.set_signup(userId, "set_number")
                        await bot.send_message(userId, "–§–ò–û –∑–∞–ø–∏—Å–∞–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=nav.getContac)
                elif db.get_signup(userId) == "set_order":
                     db.add_order(userId, message.text)
                     await bot.send_message(userId, "–ó–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" + db.get_lastOrder(userId))
                     db.set_signup(userId, "make order")
                     order_id = db.get_lastOrder_id(userId)
                     order_inform = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(userId) + "\nT–µ–ª–µ—Ñ–æ–Ω: " + db.get_contact(userId) + "\n–°–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑ " + db.get_lastOrder(userId)
                     await bot.send_message(adminId, order_inform, reply_markup = nav.createMarkup(order_id))
                else:
                    await bot.send_message(userId, "–û—à–∏–±–∫–∞ü§∑‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=nav.mainMenu)
    else:
        if (db.order_status_exists("wait price")):
            print("buyer_message 1")
            order_id = db.get_order_id("wait price")
            user_id = db.get_user_id_through_order_id(order_id)
            try:
                a = int(message.text)
                db.set_price(order_id, message.text)
                db.set_orderStatus(order_id, "wait payment")
                summa = round((int(message.text) + 50) * rate)
                await bot.send_message(user_id, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω." + "\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - " + str(order_id) +"\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ, –≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å–∏–∏—é(50EUR): " + str(summa) + " —Ä—É–±. –ü–æ –∫—É—Ä—Å—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ 1EUR = " + str(rate), reply_markup = nav.paymentMarkup(order_id))
                await bot.send_message(adminId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + str(summa) + "—Ä—É–±.")
                db.set_rubprice(order_id, summa)
            except Exception as e:
                print(repr(e))
                await message.reply("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å—É–º–º—ã")
                print("else", message.text)
        elif(db.order_status_exists("orderRedeemed")):
            print("buyer_message 2 delivery")
            order_id = db.get_order_id("orderRedeemed")
            user_id = db.get_user_id_through_order_id(order_id)
            try:
                a = int(message.text)
                db.set_delivery_price(order_id, message.text)
                db.set_orderStatus(order_id, "wait delivery payment")
                summa = round((int(message.text)) * rate)
                await bot.send_message(user_id, "–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ " + str(summa) + " —Ä—É–±. –ü–æ –∫—É—Ä—Å—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ 1EUR = " + str(rate) + "\n–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - " + str(order_id), reply_markup = nav.deliveryPaymentMarkup(order_id))
                await bot.send_message(adminId, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞ –î–û–°–¢–ê–í–ö–£ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + str(summa) + "—Ä—É–±.")
                db.set_deliveryrubprice(order_id, summa)
            except Exception as e:
                print(repr(e))
                await message.reply("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å—É–º–º—ã")

        elif message.text == '–í—Å–µ –∑–∞–∫–∞–∑—ã':
                await bot.send_message(adminId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏", reply_markup = nav.allOrdersMarkup())
        elif message.text == const.day:
            answer = report(const.day)[0]
            markup = report(const.day)[1]
            await bot.send_message(adminId, answer, reply_markup = markup)
        elif message.text == const.week:
            answer = report(const.week)[0]
            markup = report(const.week)[1]
            await bot.send_message(adminId, answer, reply_markup = markup)
        elif message.text == const.twoWeeks:
            answer = report(const.twoWeeks)[0]
            markup = report(const.twoWeeks)[1]
            await bot.send_message(adminId, answer, reply_markup = markup)
        elif message.text == const.month:
            answer = report(const.month)[0]
            markup = report(const.month)[1]
            await bot.send_message(adminId, answer, reply_markup = markup)
        elif message.text == "–í—Å–µ –≤—Ä–µ–º—è":
                records = db.get_all_orders_in_time("all")
                if(records):
                    row = 1
                    col = 0
                    answer = dataOutput(records, message.text)
                    workbook = xlsxwriter.Workbook('Report.xlsx')
                    worksheet = workbook.add_worksheet()
                    for r in records:
                        worksheet.write('A1', '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
                        worksheet.write('B1', '–ö–ª–∏–µ–Ω—Ç')
                        worksheet.write('C1', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
                        worksheet.write('D1', '–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
                        worksheet.write('E1', '–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤ –µ–≤—Ä–æ')
                        worksheet.write('F1', '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞')
                        worksheet.write('G1', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
                        worksheet.write(row, col, r[0]) 
                        worksheet.write(row, col + 1, db.get_nickname(r[1]))
                        worksheet.write(row, col+2, r[2]) 
                        worksheet.write(row, col + 3, r[3]) 
                        worksheet.write(row, col + 4, r[4]) 
                        worksheet.write(row, col+5, r[5]) 
                        worksheet.write(row, col + 6, r[10])
                        row += 1
                    workbook.close()
                    await bot.send_message(adminId, answer, reply_markup = nav.changeMarkup())
                    await bot.send_document(adminId, document=open('Report.xlsx', 'rb'))
                else:
                    await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        elif message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await bot.send_message(adminId, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=nav.mainMenuAdmin)

@dp.message_handler(content_types=['contact'])
async def bot_contact (message):
    print(message)
    userId = message.from_id
    if message.chat.type == 'private':
        if db.get_signup(userId) == "set_number":
                    db.set_contact(userId, message.contact.phone_number)
                    db.set_signup(userId, "done")
                    await bot.send_message(userId, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞", reply_markup=nav.mainMenu)
    else:
        await bot.send_message(userId, "–û—à–∏–±–∫–∞ü§∑‚Äç‚ôÄÔ∏è\n" + "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=nav.mainMenu)

@dp.callback_query_handler(text = "bankDetails")
async def callback_inline(call: types.CallbackQuery):
    await bot.send_message(call.message.chat.id, config.bank_details)
    await bot.send_photo(call.message.chat.id, photo=open('static/qr.jpg', 'rb'))

@dp.callback_query_handler(text = "UKassa")
async def callback_inline(call: types.CallbackQuery):
    orderId = str(orderIdFromMessege(call.message.text))
    f = filter(str.isdecimal, orderId)
    order_id = "".join(f)
    print("UKassa type(order_id)",type(order_id))
    if db.get_orderStatus(order_id) == "wait payment":
        print("db.get_orderStatus(order_id) == wait payment")
        # amount = str(round(db.get_rubprice(order_id)))+"00"
        amount = str(round(db.get_rubprice(order_id)))
        amountPrice = int(amount)
        description = ("–ó–∞–∫–∞–∑ ‚Ññ", order_id)
        payment_deatils = payment(amount, description)
        await bot.send_message(chat_id = call.from_user.id, text = (payment_deatils['confirmation'])['confirmation_url'] )
        # await bot.send_invoice(chat_id = call.from_user.id, title = "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #" + order_id, description = description, payload = order_id, provider_token = config.UKassaTestToken,
            # currency = "RUB", start_parameter = "test_bot", prices=[{"label":"–†—É–±", "amount": amountPrice}])
        print("payment_deatils", payment_deatils)

    elif db.get_orderStatus(order_id) == "wait delivery payment":
        print("db.get_orderStatus(order_id) == wait delivery payment")
        amount = str(round(db.get_deliveryrubprice(order_id)))+"00"
        amountPrice = int(amount)
        description = db.get_orderDesc(order_id)
        await bot.send_invoice(chat_id = call.from_user.id, title = "–û–ø–ª–∞—Ç–∞ –î–û–°–¢–ê–í–ö–ò –∑–∞–∫–∞–∑–∞ #" + order_id, description = description, payload = order_id, provider_token = config.UKassaTestToken,
            currency = "RUB", start_parameter = "test_bot", prices=[{"label":"–†—É–±", "amount": amountPrice}])
    else:
        await bot.send_message(call.from_user.id, "–û—à–∏–±–∫–∞ü§∑‚Äç‚ôÄÔ∏è\n –í–æ–∑–º–æ–∂–Ω–æ, –æ–ø–ª–∞—Ç–∞ —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.")       

# @dp.pre_checkout_query_handler()
# async def process_pre_chechout_query(pre_checkout_query: types.PreCheckoutQuery):
#     print("process_pre_chechout_query \n", pre_checkout_query)
#     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok = True)


# @dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
# async def process_pay(message: types.Message):
#     order_id = message.successful_payment.invoice_payload
#     print("message \n", message)
#     if db.order_exists(message.successful_payment.invoice_payload):
#         # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∑–∞ –∑–∞–∫–∞–∑ 
#         if db.get_orderStatus(order_id) == "wait payment":
#             db.set_orderStatus(order_id, "complitedPayment")
#             db.set_update(order_id) 
#             user_id = db.get_user_id_through_order_id(order_id)
#             order_inform = "–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞!\n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_paid_order_through_order_id(order_id) 
#             # remove inline buttons
#             # print("db.get_message_id(order_id)", db.get_message_id(order_id))
#             await bot.edit_message_text(chat_id=adminId, message_id=db.get_message_id(order_id), text = "–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ #" + order_id)
#             await bot.send_message(message.from_user.id, "–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç!")
#             await bot.send_message(adminId, order_inform, reply_markup=nav.orderRedeemedMurkup(order_id))
#         # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∑–∞ –î–æ—Å—Ç–∞–≤–∫—É 
#         elif db.get_orderStatus(order_id) == "wait delivery payment":
#             db.set_orderStatus(order_id, "paidOrderDelivery")
#             db.set_update(order_id) 
#             user_id = db.get_user_id_through_order_id(order_id)
#             order_inform = "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞!\n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_delivery_paid_order_through_order_id(order_id)  
#                 # remove inline buttons
#             await bot.edit_message_text(chat_id=adminId, message_id=db.get_message_id(order_id), text = "–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –î–û–°–¢–ê–í–ö–£ –∑–∞–∫–∞–∑–∞ #" + order_id)
#             await bot.send_message(message.from_user.id, "–ü–ª–∞—Ç–µ–∂ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∏–Ω—è—Ç!")
#             await bot.send_message(adminId, order_inform, reply_markup=nav.sentOrderMurkup(order_id))

@dp.callback_query_handler()
async def callback_inline(call):
    try:
        if call.message:
            if call.data:
                # print("call", call)
                if "ok" in call.data:
                    print ("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
                    okOrderId = call.data.partition("ok")[2]
                    db.set_update(okOrderId)
                    print("type(okOrderId)", type(okOrderId))
                        # remove inline buttons
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = call.message.text + f'\n–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –µ–≤—Ä–æ –∫ –æ–ø–ª–∞—Ç–µ. –ö—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è 1EUR = {rate} —Ä—É–±.',
                        reply_markup=None)
                    db.set_orderStatus(okOrderId, "wait price") 
                elif "cancel" in call.data:
                    print ("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
                    orderStatus = " "
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = call.message.text + f'\n–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.',
                        reply_markup=None)
                    okOrderId = call.data.partition("cancel")[2]
                    orderStatus = db.get_orderStatus(okOrderId)
                    db.set_orderStatus(okOrderId, "Canceled") 
                    orderStatus = db.get_orderStatus(okOrderId)
                    user_id = db.get_user_id_through_order_id(okOrderId)
                    await bot.send_message(user_id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –ª–∏—á–Ω–æ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

                elif "–û–ø–ª–∞—Ç–∏—Ç—å" == call.message.reply_markup.inline_keyboard[0][0].text:
                    print ("–û–ø–ª–∞—Ç–∞")
                    paymentOrderId = call.message.reply_markup.inline_keyboard[0][0].callback_data
                         # remove inline buttons
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = call.message.text,
                        reply_markup=nav.paymentOptionsMarkup())
                    user_id = call.message.chat.id
                    db.set_update(paymentOrderId)
                    order_inform = "–ó–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã \n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_order_through_order_id(paymentOrderId) 
                    msg = await bot.send_message(adminId, order_inform, reply_markup = nav.paymentComplitedMarkup(paymentOrderId))
                    db.set_message_id(paymentOrderId, msg["message_id"])

                elif "–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω–∞" == call.message.reply_markup.inline_keyboard[0][0].text:
                    print("–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω–∞")
                    paymentOrderId = call.message.reply_markup.inline_keyboard[0][0].callback_data
                    db.set_orderStatus(paymentOrderId, "complitedPayment") 
                    user_id = db.get_user_id_through_order_id(paymentOrderId)
                    order_inform = "–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω–∞ \n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_paid_order_through_order_id(paymentOrderId) 
                    order_inform_for_user = "–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω–∞ \n" + db.get_paid_order_through_order_id(paymentOrderId) 
                                    # remove inline buttons
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = order_inform,
                        reply_markup=nav.orderRedeemedMurkup(paymentOrderId))
                    await bot.send_message(user_id, order_inform_for_user)

                elif "–ó–∞–∫–∞–∑ –≤—ã–∫—É–ø–ª–µ–Ω" == call.message.reply_markup.inline_keyboard[0][0].text:
                    print("orderRedeemed")
                    redeemedOrderId = call.message.reply_markup.inline_keyboard[0][0].callback_data
                    db.set_orderStatus(redeemedOrderId, "orderRedeemed") 
                    user_id = db.get_user_id_through_order_id(redeemedOrderId)
                    order_inform = "–ó–∞–∫–∞–∑ –≤—ã–∫—É–ø–ª–µ–Ω \n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_paid_order_through_order_id(redeemedOrderId) 
                    order_inform_for_user = "–ó–∞–∫–∞–∑ –≤—ã–∫—É–ø–ª–µ–Ω \n" + db.get_paid_order_through_order_id(redeemedOrderId) + "–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n" 
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = order_inform + "\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –µ–≤—Ä–æ:",
                        reply_markup=None)
                    db.set_orderStatus(redeemedOrderId, "orderRedeemed")
                    await bot.send_message(user_id, order_inform_for_user)

                elif "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É" == call.message.reply_markup.inline_keyboard[0][0].text:
                    print ("–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")
                    deliveryPaymentOrderId = call.message.reply_markup.inline_keyboard[0][0].callback_data
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = call.message.text,
                        reply_markup=nav.paymentOptionsMarkup())
                    user_id = call.message.chat.id
                    order_inform = "–ó–∞–∫–∞–∑ –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏\n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_delivery_paid_order_through_order_id(deliveryPaymentOrderId) 
                    msg = await bot.send_message(adminId, order_inform, reply_markup = nav.deliveryPaymentComplitedMarkup(deliveryPaymentOrderId))
                    db.set_message_id(deliveryPaymentOrderId, msg['message_id'])
                elif "–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–ª—É—á–µ–Ω–∞" == call.message.reply_markup.inline_keyboard[0][0].text:
                    print("–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–ª—É—á–µ–Ω–∞")
                    deliveryPaymentOrderId = call.message.reply_markup.inline_keyboard[0][0].callback_data
                    db.set_orderStatus(deliveryPaymentOrderId, "paidOrderDelivery") 
                    user_id = db.get_user_id_through_order_id(deliveryPaymentOrderId)
                    order_inform = "–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–ª—É—á–µ–Ω–∞ \n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_delivery_paid_order_through_order_id(deliveryPaymentOrderId) 
                    order_inform_for_user = "–û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–ª—É—á–µ–Ω–∞ \n" + db.get_delivery_paid_order_through_order_id(deliveryPaymentOrderId) 
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = order_inform,
                        reply_markup=nav.sentOrderMurkup(deliveryPaymentOrderId))
                    await bot.send_message(user_id, order_inform_for_user)
                elif "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" == call.message.reply_markup.inline_keyboard[0][0].text:
                    print("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    sentOrderId = call.message.reply_markup.inline_keyboard[0][0].callback_data
                    db.set_orderStatus(sentOrderId, "sentOrder") 
                    user_id = db.get_user_id_through_order_id(sentOrderId)
                    db.set_update(sentOrderId)
                    order_inform = "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω \n" + "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + db.get_nickname(user_id) + db.get_delivery_paid_order_through_order_id(sentOrderId) 
                    order_inform_for_user = "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω \n" + db.get_delivery_paid_order_through_order_id(sentOrderId)
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = order_inform,
                        reply_markup=None)
                    await bot.send_message(user_id, order_inform_for_user)
                elif "change" in call.data:
                    print("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã")
                    s = call.message.text
                    result = re.findall("üì¶–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - \d+", s)
                    mystr = ' '.join(map(str,result))
                    number_result = [int(number_result) for number_result in str.split(mystr) if number_result.isdigit()]
                    for item in number_result:
                        answer = db.get_order_through_order_id(item)
                        await bot.send_message(adminId, answer, reply_markup = nav.changesMarkup())
                elif "delete" in call.data:
                    orderId = orderIdFromMessege(call.message.text)
                    db.delete_order(orderId)
                    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = "–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω!",
                        reply_markup=None)
                elif "edit" in call.data:
                    print("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ edit")
                    await bot.send_message(adminId, "–§—É–Ω–∫—Ü–∏—è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üîß")
     
    except Exception as e:
        print(repr(e))
def fanc():
    executor.start_polling(dp, skip_updates=True)

if __name__ =="__main__":
    Process(target = fanc).start()
    Process(target = httpd.serve_forever).start() 